<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\at91sam7x256-flash\at91sam7x256-flash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\at91sam7x256-flash\at91sam7x256-flash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 08 13:51:44 2025
<BR><P>
<H3>Maximum Stack Usage =       1004 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uip_process &rArr; selectApp &rArr; selectorSock &rArr; SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a]">resetHandler</a>
 <LI><a href="#[0]">label</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">ISR_Emac</a> from tapdev.o(.text) referenced from tapdev.o(.text)
 <LI><a href="#[4]">ISR_Tc0</a> from clock-arch.o(.text) referenced from clock-arch.o(.text)
 <LI><a href="#[1]">LowLevelInit</a> from board_lowlevel.o(.text) referenced from board_cstartup_keil.o(cstartup)
 <LI><a href="#[b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from board_cstartup_keil.o(cstartup)
 <LI><a href="#[7]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[8]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[37]">defaultFiqHandler</a> from board_lowlevel.o(.text) referenced from board_lowlevel.o(.text)
 <LI><a href="#[38]">defaultIrqHandler</a> from board_lowlevel.o(.text) referenced from board_lowlevel.o(.text)
 <LI><a href="#[39]">defaultSpuriousHandler</a> from board_lowlevel.o(.text) referenced from board_lowlevel.o(.text)
 <LI><a href="#[6]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[0]">label</a> from board_cstartup_keil.o(cstartup) referenced from board_cstartup_keil.o(cstartup)
 <LI><a href="#[3]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a]">resetHandler</a> from board_cstartup_keil.o(cstartup) referenced from board_cstartup_keil.o(VECTOR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a]"></a>resetHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, board_cstartup_keil.o(cstartup))

<P><STRONG><a name="[b]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[b6]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[c]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[aa]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b8]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b9]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e]"></a>__rt_lib_shutdown_fini</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[ba]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[bb]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[16]"></a>DM9161_SetupTimeout</STRONG> (ARM, 56 bytes, Stack size 16 bytes, dm9161.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[17]"></a>DM9161_Init</STRONG> (ARM, 64 bytes, Stack size 16 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DM9161_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1a]"></a>DM9161_InitPhy</STRONG> (ARM, 252 bytes, Stack size 40 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DM9161_InitPhy &rArr; DM9161_ResetPhy &rArr; EMAC_WritePhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_SetExtResetLength
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_GetNrstLevel
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_ExtReset
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetMdcClock
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_FindValidPhy
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[20]"></a>DM9161_AutoNegotiate</STRONG> (ARM, 1068 bytes, Stack size 40 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DM9161_AutoNegotiate &rArr; DM9161_DumpRegisters &rArr; EMAC_ReadPhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePhy
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetLinkSpeed
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMdio
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMII
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_DisableMdio
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_DumpRegisters
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[23]"></a>DM9161_GetLinkSpeed</STRONG> (ARM, 556 bytes, Stack size 32 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DM9161_GetLinkSpeed &rArr; EMAC_ReadPhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetLinkSpeed
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMdio
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_DisableMdio
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[88]"></a>AIC_ConfigureIT</STRONG> (ARM, 52 bytes, Stack size 0 bytes, aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[89]"></a>AIC_EnableIT</STRONG> (ARM, 20 bytes, Stack size 0 bytes, aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[87]"></a>AIC_DisableIT</STRONG> (ARM, 20 bytes, Stack size 0 bytes, aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[24]"></a>DBGU_Configure</STRONG> (ARM, 88 bytes, Stack size 16 bytes, dbgu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DBGU_Configure &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[3d]"></a>DBGU_PutChar</STRONG> (ARM, 60 bytes, Stack size 0 bytes, dbgu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bc]"></a>DBGU_IsRxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dbgu.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>DBGU_GetChar</STRONG> (ARM, 40 bytes, Stack size 0 bytes, dbgu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>EMAC_SetMdcClock</STRONG> (ARM, 140 bytes, Stack size 16 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMAC_SetMdcClock &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[12]"></a>EMAC_EnableMdio</STRONG> (ARM, 24 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_FindValidPhy
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_DumpRegisters
</UL>

<P><STRONG><a name="[14]"></a>EMAC_DisableMdio</STRONG> (ARM, 24 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_FindValidPhy
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_DumpRegisters
</UL>

<P><STRONG><a name="[22]"></a>EMAC_EnableMII</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
</UL>

<P><STRONG><a name="[bd]"></a>EMAC_EnableRMII</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>EMAC_ReadPhy</STRONG> (ARM, 120 bytes, Stack size 24 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMAC_ReadPhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WaitPhy
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_FindValidPhy
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_DumpRegisters
</UL>

<P><STRONG><a name="[19]"></a>EMAC_WritePhy</STRONG> (ARM, 248 bytes, Stack size 24 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMAC_WritePhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WaitPhy
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy
</UL>

<P><STRONG><a name="[21]"></a>EMAC_SetLinkSpeed</STRONG> (ARM, 52 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
</UL>

<P><STRONG><a name="[27]"></a>EMAC_Handler</STRONG> (ARM, 716 bytes, Stack size 32 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EMAC_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Emac
</UL>

<P><STRONG><a name="[93]"></a>EMAC_Init</STRONG> (ARM, 488 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[28]"></a>EMAC_GetStatistics</STRONG> (ARM, 120 bytes, Stack size 16 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMAC_GetStatistics
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>EMAC_Send</STRONG> (ARM, 368 bytes, Stack size 24 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EMAC_Send &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
</UL>

<P><STRONG><a name="[2d]"></a>EMAC_Poll</STRONG> (ARM, 864 bytes, Stack size 40 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMAC_Poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
</UL>

<P><STRONG><a name="[be]"></a>EMAC_Set_RxCb</STRONG> (ARM, 24 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>EMAC_Clear_RxCb</STRONG> (ARM, 28 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>EMAC_Set_TxWakeUpCb</STRONG> (ARM, 40 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>EMAC_Clear_TxWakeUpCb</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>PIO_Configure</STRONG> (ARM, 288 bytes, Stack size 16 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinState
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfigurePins
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[5e]"></a>PIO_Set</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal
</UL>

<P><STRONG><a name="[5d]"></a>PIO_Clear</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal
</UL>

<P><STRONG><a name="[4d]"></a>PIO_Get</STRONG> (ARM, 80 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask
</UL>

<P><STRONG><a name="[c2]"></a>PIO_GetOutputDataStatus</STRONG> (ARM, 44 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>PIO_GetISR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>RSTC_ConfigureMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>RSTC_SetUserResetEnable</STRONG> (ARM, 52 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>RSTC_SetUserResetInterruptEnable</STRONG> (ARM, 52 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>RSTC_SetExtResetLength</STRONG> (ARM, 48 bytes, Stack size 0 bytes, rstc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[c7]"></a>RSTC_ProcessorReset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>RSTC_PeripheralReset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>RSTC_ExtReset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rstc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[1e]"></a>RSTC_GetNrstLevel</STRONG> (ARM, 36 bytes, Stack size 0 bytes, rstc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[c9]"></a>RSTC_IsUserResetDetected</STRONG> (ARM, 36 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>RSTC_IsBusy</STRONG> (ARM, 36 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>RSTC_GetStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rstc.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>TC_Configure</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[8a]"></a>TC_Start</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[cc]"></a>TC_Stop</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tc.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>TC_FindMckDivisor</STRONG> (ARM, 192 bytes, Stack size 48 bytes, tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TC_FindMckDivisor &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[33]"></a>USART_Configure</STRONG> (ARM, 84 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>USART_SetTransmitterEnabled</STRONG> (ARM, 32 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>USART_SetReceiverEnabled</STRONG> (ARM, 32 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>USART_Write</STRONG> (ARM, 120 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[cf]"></a>USART_WriteBuffer</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>USART_Read</STRONG> (ARM, 124 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>USART_ReadBuffer</STRONG> (ARM, 84 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>USART_IsDataAvailable</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>USART_SetIrdaFilter</STRONG> (ARM, 64 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[39]"></a>defaultSpuriousHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>defaultFiqHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>defaultIrqHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>LowLevelInit</STRONG> (ARM, 356 bytes, Stack size 8 bytes, board_lowlevel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LowLevelInit &rArr; BOARD_RemapRam
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_RemapRam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(cstartup)
</UL>
<P><STRONG><a name="[3b]"></a>BOARD_RemapFlash</STRONG> (ARM, 36 bytes, Stack size 8 bytes, board_memories.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetRemap
</UL>

<P><STRONG><a name="[3a]"></a>BOARD_RemapRam</STRONG> (ARM, 36 bytes, Stack size 8 bytes, board_memories.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_RemapRam
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[6]"></a>fputc</STRONG> (ARM, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d1]"></a>ferror</STRONG> (ARM, 12 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_ttywrch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_PutChar
</UL>

<P><STRONG><a name="[d2]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>listen_port</STRONG> (ARM, 20 bytes, Stack size 8 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = listen_port
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[41]"></a>parse_message</STRONG> (ARM, 132 bytes, Stack size 16 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = parse_message &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok (via Veneer)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientPinSettings
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[44]"></a>setPinState</STRONG> (ARM, 164 bytes, Stack size 24 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setPinState &rArr; PIO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientPinSettings
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfigurePins
</UL>

<P><STRONG><a name="[46]"></a>clientPinSettings</STRONG> (ARM, 168 bytes, Stack size 16 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = clientPinSettings &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinState
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_message
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[4b]"></a>SignalTask</STRONG> (ARM, 668 bytes, Stack size 136 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Get
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[5a]"></a>dataSendSignalTask</STRONG> (ARM, 304 bytes, Stack size 152 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dataSendSignalTask &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[5c]"></a>rectangleSignal</STRONG> (ARM, 132 bytes, Stack size 16 bytes, hello-world.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>infoAbout</STRONG> (ARM, 44 bytes, Stack size 16 bytes, hello-world.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>

<P><STRONG><a name="[63]"></a>charToInt</STRONG> (ARM, 76 bytes, Stack size 24 bytes, hello-world.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumber
</UL>

<P><STRONG><a name="[64]"></a>recvMessage</STRONG> (ARM, 60 bytes, Stack size 16 bytes, hello-world.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>

<P><STRONG><a name="[65]"></a>doubleNumber</STRONG> (ARM, 80 bytes, Stack size 32 bytes, hello-world.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToInt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[67]"></a>doubleNumbSock</STRONG> (ARM, 64 bytes, Stack size 16 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = doubleNumbSock &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[6b]"></a>selectApp</STRONG> (ARM, 292 bytes, Stack size 568 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = selectApp &rArr; selectorSock &rArr; SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfigurePins
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[4a]"></a>psock_send</STRONG> (ARM, 204 bytes, Stack size 24 bytes, psock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acked
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfigurePins
</UL>

<P><STRONG><a name="[70]"></a>psock_generator_send</STRONG> (ARM, 256 bytes, Stack size 24 bytes, psock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acked
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[73]"></a>psock_datalen</STRONG> (ARM, 28 bytes, Stack size 0 bytes, psock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readbuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
</UL>

<P><STRONG><a name="[69]"></a>psock_newdata</STRONG> (ARM, 88 bytes, Stack size 0 bytes, psock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readbuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[6a]"></a>psock_readto</STRONG> (ARM, 264 bytes, Stack size 16 bytes, psock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psock_readto &rArr; buf_bufto
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_datalen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_bufto
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_setup
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_newdata
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock
</UL>

<P><STRONG><a name="[74]"></a>psock_readbuf</STRONG> (ARM, 272 bytes, Stack size 16 bytes, psock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_datalen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_bufdata
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_setup
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_newdata
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[6c]"></a>psock_init</STRONG> (ARM, 76 bytes, Stack size 16 bytes, psock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp
</UL>

<P><STRONG><a name="[4c]"></a>timer_set</STRONG> (ARM, 32 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask
</UL>

<P><STRONG><a name="[5f]"></a>timer_reset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal
</UL>

<P><STRONG><a name="[75]"></a>timer_restart</STRONG> (ARM, 24 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[58]"></a>timer_expired</STRONG> (ARM, 52 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask
</UL>

<P><STRONG><a name="[d3]"></a>uip_setipid</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>uip_add32</STRONG> (ARM, 216 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[78]"></a>htons</STRONG> (ARM, 24 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[76]"></a>uip_chksum</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[79]"></a>uip_ipchksum</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[7b]"></a>uip_tcpchksum</STRONG> (ARM, 20 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[8d]"></a>uip_init</STRONG> (ARM, 176 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>uip_connect</STRONG> (ARM, 512 bytes, Stack size 12 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[d4]"></a>uip_unlisten</STRONG> (ARM, 116 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>uip_listen</STRONG> (ARM, 112 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_port
</UL>

<P><STRONG><a name="[7f]"></a>uip_process</STRONG> (ARM, 6876 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = uip_process &rArr; selectApp &rArr; selectorSock &rArr; SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>uip_send</STRONG> (ARM, 76 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumber
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoAbout
</UL>

<P><STRONG><a name="[d5]"></a>uip_arp_init</STRONG> (ARM, 88 bytes, Stack size 0 bytes, uip_arp.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>uip_arp_timer</STRONG> (ARM, 152 bytes, Stack size 0 bytes, uip_arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>uip_arp_arpin</STRONG> (ARM, 376 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>uip_arp_out</STRONG> (ARM, 656 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>clock_init</STRONG> (ARM, 196 bytes, Stack size 16 bytes, clock-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clock_init &rArr; TC_FindMckDivisor &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Configure
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_DisableIT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_EnableIT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_ConfigureIT
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>clock_time</STRONG> (ARM, 12 bytes, Stack size 0 bytes, clock-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
</UL>

<P><STRONG><a name="[80]"></a>uip_log</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uip_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[3]"></a>main</STRONG> (ARM, 1124 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = main &rArr; uip_process &rArr; selectApp &rArr; selectorSock &rArr; SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsDataAvailable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetStatistics
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_GetChar
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8c]"></a>tapdev_init</STRONG> (ARM, 760 bytes, Stack size 24 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tapdev_init &rArr; DM9161_InitPhy &rArr; DM9161_ResetPhy &rArr; EMAC_WritePhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Configure
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_EnableIT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_ConfigureIT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>tapdev_read</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tapdev_read &rArr; EMAC_Poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>tapdev_send</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tapdev_send &rArr; EMAC_Send &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Configure (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_bufdata (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Poll (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Send (via Veneer)
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetStatistics (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientPinSettings (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumbSock (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvMessage (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToInt (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSendSignalTask (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinState (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetStatistics (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_memset$wrapper</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[45]"></a>strncpy</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvMessage (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToInt (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinState (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumber (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoAbout (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_message (via Veneer)
</UL>

<P><STRONG><a name="[42]"></a>strtok</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_message (via Veneer)
</UL>

<P><STRONG><a name="[48]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumbSock (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToInt (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientPinSettings (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectorSock (via Veneer)
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_fadd</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_ddiv</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_i2f</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2f</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_i2d</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSendSignalTask (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_cdcmple</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_d2f</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[dd]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[97]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9b]"></a>_double_round</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9c]"></a>_double_epilogue</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dadd</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dmul</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[df]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_llsr</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_lasr</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a1]"></a>_strtoul</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ab]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ac]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init (via Veneer)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readbuf (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumber (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rectangleSignal (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetIrdaFilter (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Poll (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Send (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Handler (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WaitPhy (via Veneer)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePhy (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetMdcClock (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_GetLinkSpeed (via Veneer)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy (via Veneer)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_Init (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_SetupTimeout (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_ResetPhy (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_FindValidPhy (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_DumpRegisters (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e4]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ae]"></a>__0snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[5b]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumbSock (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSendSignalTask (via Veneer)
</UL>

<P><STRONG><a name="[e6]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[e7]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[af]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e8]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[66]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumber (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ea]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a2]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b2]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printf1.o(i.__ARM_common_call_via_r2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfb.o(i.__ARM_common_call_via_r6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[eb]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[ec]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ed]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ee]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10]"></a>DM9161_DumpRegisters</STRONG> (ARM, 972 bytes, Stack size 24 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM9161_DumpRegisters &rArr; EMAC_ReadPhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMdio
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_DisableMdio
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_AutoNegotiate
</UL>

<P><STRONG><a name="[15]"></a>DM9161_FindValidPhy</STRONG> (ARM, 272 bytes, Stack size 32 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DM9161_FindValidPhy &rArr; EMAC_ReadPhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMdio
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_DisableMdio
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[18]"></a>DM9161_ResetPhy</STRONG> (ARM, 368 bytes, Stack size 32 bytes, dm9161.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DM9161_ResetPhy &rArr; EMAC_WritePhy &rArr; EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePhy
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_EnableMdio
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_DisableMdio
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9161_InitPhy
</UL>

<P><STRONG><a name="[26]"></a>EMAC_WaitPhy</STRONG> (ARM, 92 bytes, Stack size 16 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMAC_WaitPhy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePhy
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPhy
</UL>

<P><STRONG><a name="[2e]"></a>PIO_SetPeripheralA</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[2f]"></a>PIO_SetPeripheralB</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[30]"></a>PIO_SetInput</STRONG> (ARM, 56 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[31]"></a>PIO_SetOutput</STRONG> (ARM, 80 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[3c]"></a>BOARD_GetRemap</STRONG> (ARM, 60 bytes, Stack size 0 bytes, board_memories.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_RemapFlash
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_RemapRam
</UL>

<P><STRONG><a name="[0]"></a>label</STRONG> (ARM, 0 bytes, Stack size unknown bytes, board_cstartup_keil.o(cstartup))
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(cstartup)
</UL>
<P><STRONG><a name="[49]"></a>defaultConfigurePins</STRONG> (ARM, 496 bytes, Stack size 16 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = defaultConfigurePins &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinState
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp
</UL>

<P><STRONG><a name="[68]"></a>selectorSock</STRONG> (ARM, 1788 bytes, Stack size 152 bytes, hello-world.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = selectorSock &rArr; SignalTask &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_newdata
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleNumbSock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSendSignalTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientPinSettings
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_message
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectApp
</UL>

<P><STRONG><a name="[71]"></a>buf_setup</STRONG> (ARM, 12 bytes, Stack size 0 bytes, psock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readbuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_init
</UL>

<P><STRONG><a name="[6d]"></a>buf_bufdata</STRONG> (ARM, 284 bytes, Stack size 24 bytes, psock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readbuf
</UL>

<P><STRONG><a name="[72]"></a>buf_bufto</STRONG> (ARM, 212 bytes, Stack size 4 bytes, psock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = buf_bufto
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
</UL>

<P><STRONG><a name="[6e]"></a>send_data</STRONG> (ARM, 128 bytes, Stack size 8 bytes, psock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
</UL>

<P><STRONG><a name="[6f]"></a>data_acked</STRONG> (ARM, 156 bytes, Stack size 0 bytes, psock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
</UL>

<P><STRONG><a name="[77]"></a>chksum</STRONG> (ARM, 152 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[7a]"></a>upper_layer_chksum</STRONG> (ARM, 124 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[7d]"></a>uip_add_rcv_nxt</STRONG> (ARM, 116 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[81]"></a>uip_arp_update</STRONG> (ARM, 544 bytes, Stack size 16 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[4]"></a>ISR_Tc0</STRONG> (ARM, 32 bytes, Stack size 0 bytes, clock-arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock-arch.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>app_init</STRONG> (ARM, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_port
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>ISR_Emac</STRONG> (ARM, 16 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ISR_Emac &rArr; EMAC_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapdev.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>_fp_digits</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad]"></a>_printf_core</STRONG> (Thumb, 1790 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b4]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b3]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[8]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[f]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
